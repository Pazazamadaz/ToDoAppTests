using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using TodoApp.Controllers;
using TodoApp.Data;
using TodoApp.Models;

namespace TodoApp.Tests
{
    public class TodoItemsControllerTests : IDisposable
    {
        private readonly AppDbContext _context;
        private readonly TodoItemsController _controller;

        public TodoItemsControllerTests()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString()) // Unique name per instance
                .Options;

            _context = new AppDbContext(options);
            _controller = new TodoItemsController(_context);

            // Seed initial data
            _context.TodoItems.AddRange(
                new TodoItem { Id = 1, Title = "Task 1", IsCompleted = false, UserId = 1 },
                new TodoItem { Id = 2, Title = "Task 2", IsCompleted = true, UserId = 1 }
            );

            var user = new User
            {
                Id = 1, // Hardcoded ID
                Username = "TestUserName", // Hardcoded username
                PasswordHash = new byte[] { 0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F, 0x7A, 0x8B, 0x9C, 0xAD, 0xBE, 0xCF, 0xDA, 0xEB, 0xFC, 0x0D }, // Hardcoded hash
                PasswordSalt = new byte[] { 0x1E, 0x2F, 0x3A, 0x4B, 0x5C, 0x6D, 0x7E, 0x8F } // Hardcoded salt
            };
            
            _context.Users.Add(user);

            _context.SaveChanges();

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.NameIdentifier, "testUser"), // This should match your Username field in the database
                new Claim(ClaimTypes.Name, "TestUserName") // Optional: include any additional claims if necessary
            };

            var httpUser = new ClaimsPrincipal(new ClaimsIdentity(claims, "TestAuthType"));

            // Set up the controller context with the mocked user
            _controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext { User = httpUser }
            };
        }

        public void Dispose()
        {
            _context.Dispose();
        }

        [Fact]
        public async Task GetTodoItems_ReturnsAllItems()
        {
            // Act
            var result = await _controller.GetTodoItems();

            // Assert
            var actionResult = Assert.IsType<ActionResult<IEnumerable<TodoItem>>>(result);
            var returnValue = Assert.IsType<List<TodoItem>>(actionResult.Value);
            Assert.Equal(2, returnValue.Count);
        }

        [Fact]
        public async Task GetTodoItem_ReturnsCorrectItem()
        {
            // Act
            var result = await _controller.GetTodoItem(1);

            // Assert
            var actionResult = Assert.IsType<ActionResult<TodoItem>>(result);
            var returnValue = Assert.IsType<TodoItem>(actionResult.Value);
            Assert.Equal(1, returnValue.Id);
            Assert.Equal("Task 1", returnValue.Title);
        }

        [Fact]
        public async Task PostTodoItem_CreatesNewItem()
        {
            // Arrange
            var newItem = new TodoItemNew { Title = "Task 3", IsCompleted = false };

            // Act
            var result = await _controller.PostTodoItem(newItem);

            // Assert that the result is an ActionResult<TodoItem>
            Assert.IsType<ActionResult<TodoItem>>(result);

            // Cast the result to CreatedAtActionResult to access the details
            var createdAtActionResult = Assert.IsType<CreatedAtActionResult>(result.Result);

            // Ensure that the status code is 201 Created
            Assert.Equal(201, createdAtActionResult.StatusCode);

            // Verify that the result contains a TodoItem
            var createdItem = Assert.IsType<TodoItem>(createdAtActionResult.Value);
            Assert.NotNull(createdItem);

            // Verify the properties of the created item
            Assert.Equal("Task 3", createdItem.Title);
            Assert.False(createdItem.IsCompleted);
            Assert.True(createdItem.Id > 0); // Id should be generated by the database

            // Verify the route values in the CreatedAtActionResult
            Assert.NotNull(createdAtActionResult.RouteValues);
            Assert.Equal(nameof(_controller.GetTodoItem), createdAtActionResult.ActionName);
            Assert.Equal(createdItem.Id, createdAtActionResult.RouteValues["id"]);
        }


        [Fact]
        public async Task PutTodoItem_UpdatesItem()
        {
            // Arrange
            var updatedItem = new TodoItem { Id = 1, Title = "Updated Task", IsCompleted = true };

            // Act
            var result = await _controller.PutTodoItem(1, updatedItem);

            // Assert
            Assert.IsType<NoContentResult>(result);
            var item = await _controller.GetTodoItem(1);
            Assert.Equal("Updated Task", item.Value.Title);
            Assert.True(item.Value.IsCompleted);
        }

        [Fact]
        public async Task DeleteTodoItem_RemovesItem()
        {
            // Act
            var result = await _controller.DeleteTodoItem(1);

            // Assert
            Assert.IsType<NoContentResult>(result);
            var item = await _controller.GetTodoItem(1);
            Assert.IsType<NotFoundResult>(item.Result);
        }

        // Optional: Test Not Found scenarios
        [Fact]
        public async Task GetTodoItem_ReturnsNotFound_ForInvalidId()
        {
            // Act
            var result = await _controller.GetTodoItem(999);

            // Assert
            Assert.IsType<NotFoundResult>(result.Result);
        }

        [Fact]
        public async Task PutTodoItem_ReturnsBadRequest_ForMismatchedId()
        {
            // Arrange
            var item = new TodoItem { Id = 1, Title = "Mismatch Task", IsCompleted = true };

            // Act
            var result = await _controller.PutTodoItem(2, item);

            // Assert
            Assert.IsType<BadRequestResult>(result);
        }

        [Fact]
        public async Task DeleteTodoItem_ReturnsNotFound_ForInvalidId()
        {
            // Act
            var result = await _controller.DeleteTodoItem(999);

            // Assert
            Assert.IsType<NotFoundResult>(result);
        }

        [Theory]
        [InlineData(true)]
        [InlineData(false)]
        public async Task PostTodoItem_SetsIsPriorityCorrectly(bool isPriority)
        {
            // Arrange
            var newItem = new TodoItemNew { Title = "Task 3", IsCompleted = false, IsPriority = isPriority };

            // Act
            var result = await _controller.PostTodoItem(newItem);

            // Assert that the result is an ActionResult<TodoItem>
            var createdAtActionResult = Assert.IsType<CreatedAtActionResult>(result.Result);
            var createdItem = Assert.IsType<TodoItem>(createdAtActionResult.Value);

            // Ensure the status code is 201 Created
            Assert.Equal(201, createdAtActionResult.StatusCode);

            // Verify the IsPriority of the created item
            Assert.Equal(isPriority, createdItem.IsPriority); // Assert the IsPriority value matches what was sent
        }

    }
}
